// Pathway Framework Integration for Real-time File Monitoring
// This service would integrate with Pathway for real-time monitoring of PDF reports

interface PathwayConfig {
  reportFolderPath: string;
  filePattern: string;
  pollingInterval: number;
}

interface ReportData {
  id: string;
  fileName: string;
  filePath: string;
  lastModified: Date;
  content: any;
}

export class PathwayMonitoringService {
  private config: PathwayConfig;
  private reports: Map<string, ReportData> = new Map();
  private subscribers: ((data: ReportData[]) => void)[] = [];

  constructor(config: PathwayConfig) {
    this.config = config;
  }

  // Initialize Pathway monitoring
  async initialize() {
    // In a real implementation, this would:
    // 1. Set up Pathway input connector for file system monitoring
    // 2. Configure PDF parsing pipeline
    // 3. Set up real-time data processing
    
    console.log('Initializing Pathway monitoring for:', this.config.reportFolderPath);
    
    // Simulate initial scan
    await this.scanReportsFolder();
    
    // Set up periodic monitoring (in real implementation, this would be event-driven)
    setInterval(() => {
      this.scanReportsFolder();
    }, this.config.pollingInterval);
  }

  // Scan reports folder for new/updated PDF files
  private async scanReportsFolder() {
    try {
      // Read monitoring data from JSON file generated by Python script
      const monitoringData = await this.readMonitoringData();
      
      // Clear existing reports
      this.reports.clear();
      
      // Update reports map with actual data
      monitoringData.forEach(report => {
        this.reports.set(report.id, report);
      });
      
      // Notify subscribers
      this.notifySubscribers();
      
    } catch (error) {
      console.error('Error scanning reports folder:', error);
    }
  }

  // Read monitoring data from JSON file
  private async readMonitoringData(): Promise<ReportData[]> {
    try {
      // Try to read from the monitoring data file generated by Python script
      const url = '/monitoring_data.json?t=' + Date.now();
      console.log(`Fetching monitoring data from: ${url}`);
      
      const response = await fetch(url);
      console.log(`Fetch response status: ${response.status}, ok: ${response.ok}`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const contentType = response.headers.get('content-type');
      console.log(`Response content type: ${contentType}`);
      
      const rawText = await response.text();
      console.log(`Raw response text (first 200 chars): ${rawText.substring(0, 200)}`);
      
      // Check if response is HTML (404 page)
      if (rawText.trim().startsWith('<!DOCTYPE html>')) {
        console.log('Received HTML instead of JSON - file probably doesn\'t exist yet');
        return [];
      }
      
      const data = JSON.parse(rawText);
      console.log('Monitoring data parsed successfully:', data);
      
      if (!data.reports || !Array.isArray(data.reports)) {
        console.log('No reports array found in monitoring data, data structure:', Object.keys(data));
        return [];
      }
      
      console.log(`Found ${data.reports.length} reports in monitoring data`);
      
      return data.reports.map((report: any) => ({
        id: report.id || report.filename?.replace('.pdf', '') || Math.random().toString(),
        fileName: report.filename || 'unknown.pdf',
        filePath: report.file_path || '',
        lastModified: new Date(report.last_modified || report.timestamp || Date.now()),
        content: {
          observerName: report.observer_name || 'Unknown',
          species: report.species || 'Unknown Species',
          city: report.city || 'Unknown City',
          location: report.location || 'Unknown Location',
          date: report.date || '',
          time: report.time || '',
          urgencyLevel: report.urgency_level || 'Medium',
          weather: report.weather || '',
          animalBehavior: report.animal_behavior || '',
          description: report.description || ''
        }
      }));
    } catch (error) {
      console.error('Error reading monitoring data:', error);
      console.log('No monitoring data file found yet. Waiting for PDF reports...');
      return [];
    }
  }

  // Subscribe to real-time updates
  subscribe(callback: (data: ReportData[]) => void) {
    this.subscribers.push(callback);
    
    // Immediately send current data
    callback(Array.from(this.reports.values()));
    
    return () => {
      this.subscribers = this.subscribers.filter(sub => sub !== callback);
    };
  }

  // Get all current reports
  getAllReports(): ReportData[] {
    return Array.from(this.reports.values());
  }

  // Get reports by criteria
  getReportsBySpecies(species: string): ReportData[] {
    return this.getAllReports().filter(report => 
      report.content?.species?.toLowerCase().includes(species.toLowerCase())
    );
  }

  getReportsByUrgency(urgencyLevel: string): ReportData[] {
    return this.getAllReports().filter(report => 
      report.content?.urgencyLevel?.toLowerCase() === urgencyLevel.toLowerCase()
    );
  }

  // Notify all subscribers
  private notifySubscribers() {
    const reports = Array.from(this.reports.values());
    this.subscribers.forEach(callback => callback(reports));
  }

}

// Create and export singleton instance
export const pathwayMonitor = new PathwayMonitoringService({
  reportFolderPath: './src/reports',
  filePattern: '*.pdf',
  pollingInterval: 5000 // 5 seconds for faster updates
});

// For Windows deployment, additional configuration would be needed:
export const windowsPathwayConfig = {
  // Pathway installation on Windows
  installCommand: 'pip install pathway',
  
  // Windows-specific file monitoring
  watchFolder: 'C:\\WildlifeReports',
  
  // PowerShell integration for file operations
  psCommands: {
    listFiles: 'Get-ChildItem -Path "C:\\WildlifeReports" -Filter "*.pdf"',
    watchChanges: 'Get-WinEvent -FilterHashtable @{LogName="System"; ID=4656}'
  },
  
  // Docker setup for Windows
  dockerSetup: {
    dockerfile: `
FROM python:3.11-slim
RUN pip install pathway pandas
WORKDIR /app
COPY . .
CMD ["python", "pathway_monitor.py"]
`,
    composeFile: `
version: '3.8'
services:
  pathway-monitor:
    build: .
    volumes:
      - C:\\WildlifeReports:/app/reports
    environment:
      - REPORTS_PATH=/app/reports
`
  }
};